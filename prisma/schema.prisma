// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category{
  categortId String @db.VarChar(25) @id @default(cuid())
  categoryName String 
  communities Community[]

}

model Community{
  communityId String @db.VarChar(25) @id @default(cuid())
  communityName String 
  isPrivate Boolean
  category Category @relation(fields: [categoryId] , references: [categortId])
  categoryId String @db.VarChar(25)
  creator User @relation(fields: [creatorId] , references: [userId])
  creatorId String @db.VarChar(25)
  joinedUsers CommunitiesUsers[]
  posts Post[]

}


model User{
  userId String @db.VarChar(25) @id @default(cuid())
  userName String @db.VarChar(255)
  email String 
  createdAt  DateTime   @default(now())
  posts Post[]
  reactions Reaction[]
  comments Comment[]
  commentsReactions CommentReactions[]
  createdCommuities Community[]
  joinedCommunities CommunitiesUsers[]
  followers Follows[] @relation("following")
  following Follows[] @relation("follower")
}

model Follows{
  follower User @relation("follower" , fields: [followerId] , references: [userId])
  followerId String @db.VarChar(25)
  following User @relation("following" , fields: [followingId] , references: [userId])
  followingId String @db.VarChar(25)
  followingAt DateTime @default(now())
  @@id([followerId , followingId])
}
model CommunitiesUsers{
    user User @relation(fields: [userId] , references: [userId])
    userId String @db.VarChar(25)
    community Community @relation(fields: [communityId] , references: [communityId])
    communityId String @db.VarChar(25)
    joinedAt DateTime @default(now())
    @@id([userId , communityId])
}

model Post{
  postId String @db.VarChar(25) @id @default(cuid())
  postTitle String 
  postContent String
  createdAt  DateTime   @default(now())
  author User @relation(fields: [authorId] , references: [userId])
  authorId String @db.VarChar(25)
  community Community? @relation(fields: [communityId] , references: [communityId])
  communityId String? @db.VarChar(25)
  reactions Reaction[]
  comments Comment[]
  
}

model Reaction{
   user User @relation(fields: [userId] , references: [userId])
   userId String @db.VarChar(25)
   post Post @relation(fields: [postId] , references: [postId])
   postId String @db.VarChar(25)
   isLike Boolean
   createdAt  DateTime   @default(now())
   @@id([postId, userId])
}

model Comment{
  commentId String @db.VarChar(25) @id @default(cuid())
  content String 
  user User @relation(fields: [userId] , references: [userId])
  userId String @db.VarChar(25)
  post Post @relation(fields: [postId] , references: [postId])
  postId String @db.VarChar(25)
  reply Comment? @relation( "replies" , fields: [replyTo] , references: [commentId])
  replyTo String? @db.VarChar(25)
  replies Comment[] @relation("replies")
  createdAt  DateTime   @default(now())
  reactions CommentReactions[]
}

model CommentReactions{
    comment Comment @relation(fields: [commentId] , references: [commentId])
    commentId String @db.VarChar(25)
    user User @relation(fields: [userId] , references: [userId])
    userId String @db.VarChar(25)
    isLike Boolean
    createdAt DateTime @default(now())
    @@id([commentId , userId])
}
